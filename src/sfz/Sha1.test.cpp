// Copyright (c) 2010 Chris Pickel <sfiera@gmail.com>
//
// This file is part of libsfz, a free software project.  You can redistribute it and/or modify it
// under the terms of the MIT License.

#include "sfz/Sha1.hpp"

#include <cstring>
#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include "sfz/Bytes.hpp"
#include "sfz/Exception.hpp"
#include "sfz/Foreach.hpp"
#include "sfz/Range.hpp"

using testing::Eq;
using testing::ExplainMatchResult;
using testing::Test;

namespace sfz {
namespace {

typedef Test Sha1Test;

BytesPiece string_bytes(const char* string) {
    return BytesPiece(reinterpret_cast<const uint8_t*>(string), strlen(string));
}

MATCHER_P(HasDigest, digest, "") {
    Bytes bytes;
    arg.get_digest(&bytes);
    return ExplainMatchResult(
            Eq(BytesPiece(reinterpret_cast<const uint8_t*>(digest), 20)),
            BytesPiece(bytes), result_listener);
}

const char kEmptyDigest[21] =
    "\xda\x39\xa3\xee\x5e\x6b\x4b\x0d\x32\x55\xbf\xef\x95\x60\x18\x90\xaf\xd8\x07\x09";

// The empty string should have the given digest.
TEST_F(Sha1Test, Empty) {
    Sha1 sha;
    EXPECT_THAT(sha, HasDigest(kEmptyDigest));
}

// A short value should have the given digest.  This doesn't test anything particularly complex
// about the Sha1 implementation.
TEST_F(Sha1Test, Short) {
    Sha1 sha;
    sha.update(string_bytes("abc"));
    const char expected[21] =
        "\xa9\x99\x3e\x36\x47\x06\x81\x6a\xba\x3e\x25\x71\x78\x50\xc2\x6c\x9c\xd0\xd8\x9d";
    EXPECT_THAT(sha, HasDigest(expected));
}

// If the input size is > 55, then a second block will have to be added, in order to append the
// input size to the end.
TEST_F(Sha1Test, ForceSecondBlock) {
    Sha1 sha;
    sha.update(string_bytes("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"));
    const char expected[21] =
        "\x84\x98\x3e\x44\x1c\x3b\xd2\x6e\xba\xae\x4a\xa1\xf9\x51\x29\xe5\xe5\x46\x70\xf1";
    EXPECT_THAT(sha, HasDigest(expected));
}

// Test a long input, added in large chunks, which are not a multiple of 64 bytes (the block size).
TEST_F(Sha1Test, Long) {
    Bytes input;
    foreach (i, range(77)) {
        input.append(string_bytes("abcdefghijklm"));
    }
    input.resize(1000);

    Sha1 sha;
    foreach (i, range(1000)) {
        sha.update(input);
    }

    const char expected[21] =
        "\x22\x87\xc7\x9b\xe6\x5d\x2e\x85\x10\x4e\x4c\x8e\xa7\x04\x68\x0a\x6b\xa6\x8a\x75";
    EXPECT_THAT(sha, HasDigest(expected));
}

// Adding the input in chunks of 512 bits (64 bytes) should work fine.
TEST_F(Sha1Test, EvenMultipleOf512Bits) {
    Bytes bytes;
    foreach (i, range(8)) {
        bytes.append(string_bytes("01234567"));
    }
    ASSERT_THAT(bytes.size(), Eq<size_t>(64));

    Sha1 sha;
    foreach (i, range(10)) {
        sha.update(bytes);
    }

    const char expected[21] =
        "\xde\xa3\x56\xa2\xcd\xdd\x90\xc7\xa7\xec\xed\xc5\xeb\xb5\x63\x93\x4f\x46\x04\x52";
    EXPECT_THAT(sha, HasDigest(expected));
}

// Add each character from ' ' ('\x20') to '\x7f'.  Check the hash after adding each character.
TEST_F(Sha1Test, IncrementalDigest) {
    const char expected[][21] = {
        "\xb8\x58\xcb\x28\x26\x17\xfb\x09\x56\xd9\x60\x21\x5c\x8e\x84\xd1\xcc\xf9\x09\xc6",
        "\x3a\xec\xb4\x74\x33\x2a\xd1\x32\xb0\x43\x25\xb2\xc1\xc5\x5e\x5d\x4e\xc7\x45\x32",
        "\xdd\xb5\xa7\x49\x18\x0a\x7a\xbb\xd6\x94\x99\x4f\xcf\xd8\x2c\xcc\x50\x54\xe9\xcb",
        "\x1d\xb3\x73\x69\x2b\xee\x18\x5f\x8f\xe3\xc4\x0c\xdb\x8c\x53\x9c\xe8\xca\x08\xe5",
        "\x56\xd2\xb9\x95\x23\x68\x2a\xc4\xa6\x84\xa7\xd5\xb9\x17\x70\x7c\xfa\xed\xc2\xce",
        "\x8c\x92\xc0\xf0\x93\xbc\xa9\xfd\xf5\x7a\x8a\x28\xca\x70\xe0\xd4\x98\xc5\xe8\xc1",
        "\xfd\x28\x73\x31\x7d\xf5\x5f\x6d\x3c\xd1\x9b\xa5\x70\x45\xdf\xaf\x5b\x7f\x6d\x13",
        "\xd1\x47\xd7\x6d\xdc\x5b\x77\x39\x53\xc6\xe8\x1f\xb1\xb5\x6e\x9e\x20\x5c\x09\x76",
        "\x02\x17\x8c\x57\x80\x3f\x03\xb9\xca\x36\x8f\xc3\xfc\xc3\xde\x0d\xac\xdb\x43\x83",
        "\x38\xa6\x13\x48\x7e\xe9\x10\x7e\x82\xdc\xd3\x12\xdb\xfd\xbf\x44\x55\x81\xcc\xb2",
        "\x78\xc5\x2f\x1e\x6d\xd8\xc9\xbd\xb3\xa3\x38\xc0\xd9\xe9\x7b\x05\xf2\x46\x8d\xdf",
        "\x33\xeb\x72\x60\x7f\x14\x47\xd0\x52\x60\x20\xce\xa8\x28\x0d\xd4\x7a\x92\x5d\x04",
        "\x32\x7b\xaa\x4b\x40\x2b\x30\x58\x01\xc9\xc6\x55\xe9\x7b\x7e\x77\x85\x83\x18\x90",
        "\x53\xb5\xa7\x33\xcb\xd3\x23\x46\xe9\x23\xf2\xcc\x2b\x82\x30\x3b\x47\xba\xb4\xbc",
        "\x64\xaf\xe0\x78\xdb\xdc\x5a\x59\x62\x9f\x93\x5d\xdf\x07\xef\x6b\x20\xda\xa9\xa2",
        "\x5c\x3f\x75\xdd\xa7\x7e\xb6\x1e\xf6\xd0\x4b\x50\x45\xbd\xf6\x61\xf4\xfa\x60\x8c",
        "\xdd\xcf\x9a\xe9\xe6\x5f\x08\x63\x5b\x42\x4a\xa4\x9b\x5a\x80\xe4\x10\xd2\x3d\x88",
        "\xf3\x6e\xb8\xbf\x04\xac\x8b\x3c\xb1\xf2\x73\x5d\x97\x2c\x42\xd7\xf4\x16\x0d\x42",
        "\xc9\xe4\x57\x51\x96\x82\x9b\x57\xcd\xed\x45\x6c\x36\x3f\x15\x50\xce\xb6\x4f\x15",
        "\x8b\x08\xd5\x80\xb0\xfc\xfd\xb4\x43\x43\xb8\xdb\x2d\x24\xfc\x4a\xe7\x17\x1c\x43",
        "\xe0\x81\xc9\xcf\x08\x30\x0e\x5e\xa2\xfd\xa1\x82\x15\x78\xd3\xaa\x7d\x2e\x7c\x63",
        "\x7e\x2a\x94\x46\x41\x7b\x01\x94\x2f\x0a\x8a\x19\x0d\xbd\x13\xcb\x5e\x95\x82\x1a",
        "\xf3\x21\xed\x34\xdd\xbe\xa2\x5a\x15\x28\x57\x9d\xc8\x0a\xdf\x48\xe2\xf7\x8d\xe7",
        "\x20\x50\x4f\x10\xbc\xa8\x6a\xdb\x0f\x11\x05\x8b\x8f\xcf\xc7\x08\xdc\x8c\xe1\xcb",
        "\x46\x31\xb5\x68\x47\xc9\x4c\x57\xf6\xc4\x8d\x5b\x06\x7c\x59\x55\x61\xf6\x80\xb0",
        "\xef\x2d\xca\x9c\x9f\x02\x05\x5e\x0b\x76\xe9\x4f\xfa\x17\x45\x44\xe1\x23\xb0\x63",
        "\x3d\xe9\x8e\x18\xd3\xb9\x5c\xe3\xeb\x6a\x86\x7a\xbb\x77\xe2\xb1\x6e\xd8\x69\xf1",
        "\x25\x4c\x0b\x10\x89\x48\x62\x0d\xf6\xbe\x13\x32\x63\xfc\x9b\x84\xcf\x28\x55\x42",
        "\x54\xb7\x4a\x5b\x34\x00\xc0\xbf\x01\x5d\xcc\x02\xa3\xbe\x53\xf7\x3b\x55\x64\xf3",
        "\x50\x6b\x68\x76\x0f\x46\xb3\xdb\x18\x93\x1b\xf4\xe0\x4e\x6f\xe8\x71\xf2\x0b\x53",
        "\x44\xe8\xfc\x38\xc9\xb9\x70\x43\x5a\x0c\x1d\x2b\x02\x4c\x86\x2b\x5d\x63\x80\x2f",
        "\x95\x02\x71\x1a\x5b\x64\x68\xa0\x40\x0d\x09\x54\x80\x51\x5d\x96\x10\xf3\x27\xac",
        "\x16\x0a\x69\xc0\x88\x42\x22\xa7\xb0\xea\x86\x3b\xad\x01\x8f\x22\xf6\x06\x64\xb3",
        "\x6b\x65\x42\x89\x2b\x4e\xb6\x8d\x78\x4c\x34\x2f\xbb\xb2\xb9\xa3\x39\x88\x10\x27",
        "\x6f\xbf\x1f\x1d\x59\x5c\xad\x13\x1a\x40\x86\xd6\xc7\x6f\x13\xdf\xa0\xeb\xc5\xaf",
        "\x63\x31\xdd\xba\x6f\xe0\x5d\x3a\xce\x0a\xff\xae\x59\x2f\x90\x29\x11\x1c\x48\x75",
        "\xc6\x0d\x80\x92\xf6\xbb\x53\x3f\x72\x9a\x44\x06\x48\x2d\xf1\x34\x9f\xa0\x7e\xb0",
        "\x43\xbc\x4b\x4e\x62\xb2\xb2\x89\xbf\x58\x96\x27\xbc\x12\xc3\x07\xb8\x69\x84\x2a",
        "\xfe\x51\x04\xee\x1c\xd1\x32\x04\x12\x1a\x6d\xaa\x50\xad\x9a\xd6\xd2\x69\x9b\xb7",
        "\xc8\x48\x80\xcb\x0e\xb1\x93\x25\x23\x52\x46\x7a\xa4\x57\xf0\xa4\x79\xc3\x49\x75",
        "\x3d\x55\xae\xa1\xc1\x88\x96\xda\x65\x05\xfe\xb3\xd9\x92\x47\x71\x5f\x94\xa8\x18",
        "\x61\x1d\x52\xe6\x0c\x7f\xb3\x65\xe3\xae\xea\x18\x28\x78\xd2\xa2\x43\xa3\xd0\xc3",
        "\x36\x08\x6c\x17\x1e\x3c\x3b\xbc\x8e\x09\xe6\x3b\xa7\x49\x73\x91\xd3\x7d\x11\xc5",
        "\x25\x26\x1e\x3d\x9f\x08\xe2\x7c\x81\xca\xd5\x2f\x5c\x08\xfc\xb1\x93\x68\x5e\xf5",
        "\x88\x8d\xf7\x83\xb4\x0c\x07\x2c\x84\x08\x27\xbb\x5d\x54\xdd\x8f\x35\x43\x44\x4c",
        "\x0e\x9b\x59\x58\xc8\xe7\xdd\xcd\x5e\xd4\x79\x34\x38\x20\x58\x21\x28\x57\x5a\x24",
        "\xf8\x4e\x4e\xfb\x3e\x8a\xf8\x1e\xed\x7c\xc7\x6c\x01\x73\x9c\xa5\xc4\xd8\x89\x02",
        "\xfc\xd3\xe8\x56\xd4\x74\xe9\x4e\xe6\x5e\xb9\x9d\x47\xe6\xd8\x14\xb1\x6a\x1e\xf5",
        "\x56\x3d\x5c\xd1\xa2\xe7\x51\x0d\x40\x35\x51\xca\xb7\xe8\x11\xef\x08\x66\xb9\xee",
        "\xbf\xd0\x44\x68\x50\x7b\xc9\x72\x4e\x34\xd8\x31\xcb\x98\x0e\x8f\xaf\x2f\x11\x0c",
        "\x3a\xb7\x4a\xd4\xe0\x10\xe9\x25\x1d\xb2\xe0\x03\x3c\x9e\x07\xad\xef\x9a\x9a\xa2",
        "\x42\x23\x4e\xeb\x00\x36\xa5\x2e\xca\x9f\x80\xa8\x96\x24\x1b\x54\xaa\x57\x2e\x9f",
        "\xe9\x85\xe7\x6a\xb9\xaa\xd9\x15\xd5\x04\xac\xb3\xa1\x71\xc6\x06\x02\xb0\xff\xd7",
        "\xac\x36\x63\x22\x43\x25\x76\x89\xb5\x28\x97\x6a\x30\xaa\x71\xa0\x06\x25\x72\x76",
        "\x6b\x1a\x95\x31\xee\x7f\x08\x87\xaa\x38\x12\xb6\x93\xaa\x82\xa4\xbc\xab\x20\xdb",
        "\x10\xef\xb3\x9d\x0f\xec\x45\xb0\x5f\x8a\x67\x9d\xcf\x63\x28\xf1\xeb\x5f\xc4\x69",
        "\xe1\xcf\xcd\x09\xcc\x89\x66\xad\xc7\xb5\x60\x8d\xa4\x65\xf8\xf0\xe5\x85\xfd\x15",
        "\xcb\xfa\x3b\xd9\x87\xda\xc6\x69\xcf\xb0\xde\x30\xca\x04\xe3\x78\x24\x98\xca\x17",
        "\xcf\x63\x6e\x3e\xc3\x53\x55\x1d\x44\xfb\xdd\x6a\x29\x9e\x3c\xe2\x5e\xa5\xf1\x2f",
        "\x4d\x37\xc1\x8d\x90\xd3\xd3\xc9\x63\x5d\x67\x26\x38\xab\x7c\x40\x41\xc1\xa1\x5e",
        "\x72\xff\x97\x85\x6b\x74\xaa\x7e\xf3\x25\xe8\x36\x16\x5b\x07\xa9\x81\x8c\xd7\xdc",
        "\xeb\xde\x99\x88\xb4\xa5\xc5\x50\xaf\x83\xb0\x0b\xa2\x9d\xfd\x6a\xe0\xf3\x40\xf3",
        "\xfa\xf0\xe7\x05\x90\x32\x30\x70\x28\xdc\x94\xd0\xe9\x7d\x1b\xfd\x5c\xb6\xa1\x34",
        "\xd4\x4e\x1f\xe0\xc1\xa7\xac\x33\xe8\x7a\x51\x02\x85\xe6\x41\x9a\xfd\x97\x27\xe8",
        "\xe2\xac\xd1\xef\x1f\x11\xd0\x5e\x39\x55\xbb\x24\x4d\xba\x21\x15\x9d\xe9\x62\x1f",
        "\x27\x5d\x88\x3e\x37\xea\xc6\xf2\xb5\xd9\x96\xe0\xc0\x65\x6e\xca\xbe\x65\x45\x3f",
        "\x7c\x7c\x7b\x6c\xd0\x14\xd2\x19\xfd\x72\xf6\x26\x63\x6f\xbb\x59\xc9\x9a\xca\x58",
        "\xa3\xbb\x9c\xf7\xcc\x3c\xa4\x08\x1f\x85\xac\xdb\xe1\xcc\x91\x05\x5b\x26\xc1\x73",
        "\x6c\xfc\x9b\x15\xfe\x54\x35\x69\xf6\x75\xc4\xb7\x4f\xb7\xe0\x36\xe8\xc2\x4a\x8a",
        "\xc3\xaf\xc3\x4c\x41\x8d\xd1\xf6\xb4\x98\x37\x95\xb2\xbe\x0a\xc3\x09\x72\x0a\x47",
        "\xe3\x95\xcb\xd1\x8b\x96\x81\x94\xe6\xe6\x9e\x8a\x4f\xe8\x6a\x6e\x4d\x96\xd9\xca",
        "\xc2\xfc\x03\x2f\x01\xd9\xf0\x26\x5e\x43\xe7\x54\xc1\xf2\xf8\x5e\xe4\x67\x42\x96",
        "\xfc\xb7\x74\xdf\x95\x84\x16\x89\xf7\x80\x2b\x00\x21\xe5\x46\xa4\x11\xe1\x4f\xc0",
        "\xa5\xd6\x32\xcf\xfa\x00\x32\x61\x0b\xb6\xd1\xce\x7c\x62\x91\x3a\x12\x47\xc7\xc5",
        "\x6f\xf6\xf3\x32\x70\xf7\xf6\xb6\x8b\xcc\xa8\x46\x90\x25\xbe\x7e\xe9\x61\xff\x4d",
        "\x2a\xad\x69\xa7\x50\xbe\x65\x04\x76\x15\x4d\x12\x84\xe4\xb5\x15\x05\x6e\xaa\xfb",
        "\xbd\x04\x1c\xa5\x22\x12\xa1\x11\xe3\xd2\xb9\xdb\x52\x44\x71\x72\xa0\x5e\x1c\xe5",
        "\x59\xbc\x66\x23\x21\xdb\x64\x3d\xa5\x90\xbe\x5f\x3f\x96\xc1\x32\x24\x92\xb9\xb1",
        "\x8e\x61\xca\x1b\xa4\x6b\xde\x4b\x10\x36\xd5\xf3\x28\x0c\xea\xca\x77\x87\xc7\xc1",
        "\xf9\x90\xab\x4f\xda\xd6\xf5\x10\x4b\x77\x70\x59\x3d\xb9\x16\xda\x04\x04\xe6\x1d",
        "\xbf\x36\xa1\x6a\x96\x5a\x0e\x96\x27\xb0\x97\x8f\x71\x3d\x96\xd8\x3b\x8e\x4d\x12",
        "\xc7\x03\x96\x04\xec\x5b\xf9\x6f\xb4\x35\x97\x40\xfb\x3a\xb7\x0e\x6b\xcf\xf1\xfe",
        "\xfb\xd5\xe6\xcd\xdf\xbe\x76\x85\x12\x23\xb0\x29\x01\xfe\x7f\x11\xba\xef\xce\x4f",
        "\x07\xb9\x21\x2f\x06\xf3\x9d\x3e\x90\xa1\x8f\x78\x15\x08\xc2\xe8\x97\x34\x24\x67",
        "\x73\xf9\xc9\xb6\xa5\x27\x50\x37\x4a\x12\x87\x69\xa9\x29\x4c\x27\x28\xa9\xdc\x56",
        "\x25\x81\xe1\x0b\x2b\xba\x90\x3b\x66\x3e\x41\x0d\x11\x29\x31\x35\x09\x44\x8f\xba",
        "\x0b\x40\xb6\xaf\x70\x97\x04\x5d\x7a\x0d\x26\xf0\x2a\xb6\xc0\xab\x12\x86\x0d\xbd",
        "\xbd\x6f\x4f\x4f\x8c\x41\x1f\x0f\xbb\xa2\xf6\xfe\x8f\x01\x54\xba\x4b\x1d\x3a\x74",
        "\xd6\xae\x70\x80\x98\x1d\x00\xad\x41\x77\x3b\x7d\xff\x73\xfa\x55\x0a\x8e\x1b\x0a",
        "\xf5\x3b\x1c\x88\xd4\x00\xed\xfa\x66\x6a\x98\x15\x33\x6b\x50\x62\x10\xe0\x55\xe5",
        "\xd3\xcc\x63\xfe\x01\x37\xa1\x46\x66\x1c\xe4\xd5\xc8\xa6\x5b\xad\x1e\x1d\x95\x6e",
        "\xe0\x19\x7d\xb2\x3a\x89\x81\xfa\x20\x92\x56\x79\x88\x33\x78\x43\x91\xd8\xcf\xd2",
        "\x0e\x85\x37\xc0\x82\x4e\xf6\xe2\xcb\x93\x0f\x54\xf0\xa8\x20\xb3\x7a\xaa\x18\x68",
        "\x35\x30\xd5\xfe\xf6\x1f\x5d\xe6\xf0\x9a\x67\xa1\x5b\x56\xaf\x26\xe9\xb8\x24\x5d",
        "\xe4\xf8\x18\x8c\xdc\xa2\xa6\x8b\x07\x40\x05\xe2\xcc\xab\x5b\x67\x84\x2c\x6f\xc7",
        "\x4a\x4a\x4e\x9c\x64\x60\x05\xda\x73\x11\x71\x41\x70\x59\xd9\x35\xc3\x8e\x5b\xa1",
    };

    Sha1 sha;
    foreach (byte, range<uint8_t>(' ', '\x80')) {
        sha.update(BytesPiece(&byte, 1));
        EXPECT_THAT(sha, HasDigest(expected[byte - ' ']));
    }

    sha.reset();
    EXPECT_THAT(sha, HasDigest(kEmptyDigest));
}

}  // namespace
}  // namespace sfz
